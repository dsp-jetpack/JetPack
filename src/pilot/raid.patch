--- /usr/lib/python2.7/site-packages/ironic/drivers/modules/drac/raid.py	2018-10-24 21:41:25.085033660 +0000
+++ raid.py	2018-10-24 21:40:44.153033660 +0000
@@ -34,6 +34,7 @@
 from ironic.drivers.modules.drac import common as drac_common
 from ironic.drivers.modules.drac import job as drac_job
 
+drac_constants = importutils.try_import('dracclient.constants')
 drac_exceptions = importutils.try_import('dracclient.exceptions')
 
 LOG = logging.getLogger(__name__)
@@ -202,7 +203,7 @@
         raise exception.DracOperationError(error=exc)
 
 
-def commit_config(node, raid_controller, reboot=False):
+def commit_config(node, raid_controller, reboot=False, realtime=False):
     """Apply all pending changes on a RAID controller.
 
     :param node: an ironic node object.
@@ -215,7 +216,9 @@
     client = drac_common.get_drac_client(node)
 
     try:
-        return client.commit_pending_raid_changes(raid_controller, reboot)
+        return client.commit_pending_raid_changes(raid_controller,
+                                                  reboot=reboot,
+                                                  realtime=realtime)
     except drac_exceptions.BaseClientException as exc:
         LOG.error('DRAC driver failed to commit pending RAID config for'
                   ' controller %(raid_controller_fqdd)s on node '
@@ -624,7 +633,7 @@
     return filtered_disks
 
 
-def _commit_to_controllers(node, controllers):
+def _commit_to_controllers(node, controllers, realtime=False):
     """Commit changes to RAID controllers on the node."""
 
     if not controllers:
@@ -641,10 +650,10 @@
         # Do a reboot only for the last controller
         if controller == controllers[-1]:
             job_id = commit_config(node, raid_controller=controller,
-                                   reboot=True)
+                                   reboot=True, realtime=realtime)
         else:
             job_id = commit_config(node, raid_controller=controller,
-                                   reboot=False)
+                                   reboot=False, realtime=realtime)
 
         LOG.info('Change has been committed to RAID controller '
                  '%(controller)s on node %(node)s. '
@@ -729,10 +738,12 @@
         logical_disks_to_create = _filter_logical_disks(
             logical_disks, create_root_volume, create_nonroot_volumes)
 
+        realtime=True
+        reboot_is_required = drac_constants.RebootRequired.true
         controllers = set()
         for logical_disk in logical_disks_to_create:
             controllers.add(logical_disk['controller'])
-            create_virtual_disk(
+            result = create_virtual_disk(
                 node,
                 raid_controller=logical_disk['controller'],
                 physical_disks=logical_disk['physical_disks'],
@@ -742,7 +753,10 @@
                 span_length=logical_disk.get('span_length'),
                 span_depth=logical_disk.get('span_depth'))
 
-        return _commit_to_controllers(node, list(controllers))
+            if result['is_reboot_required'] == reboot_is_required:
+                realtime = False
+
+        return _commit_to_controllers(node, list(controllers), realtime)
 
     @METRICS.timer('DracRAID.delete_configuration')
     @base.clean_step(priority=0)
