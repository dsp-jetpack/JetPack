--- /usr/lib/python2.7/site-packages/dracclient/client.py	2019-04-23 19:07:27.470169786 +0000
+++ client.py	2019-04-23 19:06:54.534572120 +0000
@@ -272,7 +272,7 @@
         state_reached = self._wait_for_host_state(
             self.client.host,
             alive=False,
-            ping_count=3,
+            ping_count=2,
             retries=24)
 
         if not state_reached:
@@ -468,7 +468,8 @@
                           cim_system_creation_class_name='DCIM_ComputerSystem',
                           cim_system_name='DCIM:ComputerSystem',
                           reboot=False,
-                          start_time='TIME_NOW'):
+                          start_time='TIME_NOW',
+                          realtime=False):
         """Creates a configuration job.
 
         In CIM (Common Information Model), weak association is used to name an
@@ -492,6 +493,8 @@
                            means execute immediately or None which means
                            the job will not execute until
                            schedule_job_execution is called
+        :param realtime: Indicates if reatime mode should be used.
+               Valid values are True and False.
         :returns: id of the created job
         :raises: WSManRequestFailure on request failures
         :raises: WSManInvalidResponse when receiving invalid response
@@ -508,7 +511,8 @@
             cim_system_creation_class_name=cim_system_creation_class_name,
             cim_system_name=cim_system_name,
             reboot=reboot,
-            start_time=start_time)
+            start_time=start_time,
+            realtime=realtime)
 
     def create_nic_config_job(
             self,
@@ -785,7 +789,7 @@
         return self._raid_mgmt.delete_virtual_disk(virtual_disk)
 
     def commit_pending_raid_changes(self, raid_controller, reboot=False,
-                                    start_time='TIME_NOW'):
+                                    start_time='TIME_NOW', realtime=False):
         """Applies all pending changes on a RAID controller
 
          ...by creating a config job.
@@ -798,6 +802,8 @@
                means execute immediately or None which means
                the job will not execute until
                schedule_job_execution is called
+        :param realtime: Indicates if reatime mode should be used.
+               Valid values are True and False.
         :returns: id of the created job
         :raises: WSManRequestFailure on request failures
         :raises: WSManInvalidResponse when receiving invalid response
@@ -811,7 +817,8 @@
             cim_name='DCIM:RAIDService',
             target=raid_controller,
             reboot=reboot,
-            start_time=start_time)
+            start_time=start_time,
+            realtime=realtime)
 
     def abandon_pending_raid_changes(self, raid_controller):
         """Deletes all pending changes on a RAID controller
@@ -830,6 +837,14 @@
             cim_creation_class_name='DCIM_RAIDService',
             cim_name='DCIM:RAIDService', target=raid_controller)
 
+    def is_realtime_supported(self, raid_controller):
+        """Find if controller supports realtime or not
+
+        :param raid_controller: ID of RAID controller
+        :returns: True or False
+        """
+        return self._raid_mgmt.is_realtime_supported(raid_controller)
+
     def list_cpus(self):
         """Returns the list of CPUs
 
@@ -962,15 +977,23 @@
         """
         return self._raid_mgmt.is_jbod_capable(raid_controller_fqdd)
 
-    def is_raid_controller(self, raid_controller_fqdd):
-        """Find out if object's fqdd is for a raid controller or not
+    def is_raid_controller(self, raid_controller_fqdd, raid_controllers=None):
+        """Determine if the given controller is a RAID controller
+
+        Since a BOSS controller is a type of RAID controller, this method will
+        return True for both BOSS and RAID controllers.
 
         :param raid_controller_fqdd: The object's fqdd we are testing to see
                                      if it is a raid controller or not.
+        :param raid_controllers: A list of RAIDControllers used to check for
+                                 the presence of BOSS cards.  If None, the
+                                 iDRAC will be queried for the list of
+                                 controllers.
         :returns: boolean, True if the device is a RAID controller,
                   False if not.
         """
-        return self._raid_mgmt.is_raid_controller(raid_controller_fqdd)
+        return self._raid_mgmt.is_raid_controller(raid_controller_fqdd,
+                                                  raid_controllers)
 
     def is_boss_controller(self, raid_controller_fqdd):
         """Find out if a RAID controller a BOSS card or not
