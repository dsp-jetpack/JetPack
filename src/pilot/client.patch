--- /usr/lib/python2.7/site-packages/dracclient/client.py	2017-03-06 15:32:03.693806035 +0000
+++ client.py	2017-03-06 15:24:27.126655811 +0000
@@ -16,6 +16,7 @@
 """
 
 import logging
+from time import sleep
 
 from dracclient import exceptions
 from dracclient.resources import bios
@@ -466,6 +467,39 @@
 
         return self._inventory_mgmt.list_nics()
 
+    def is_idrac_ready(self):
+        return lifecycle_controller.LifecycleControllerManagement(
+            self.client).is_idrac_ready()
+
+    def wait_until_idrac_is_ready(self):
+        """ Waits until the iDRAC is in a ready state
+
+        :raises: WSManRequestFailure on request failures
+        :raises: WSManInvalidResponse when receiving invalid response
+        :raises: DRACOperationFailed on error reported back by the DRAC
+                 interface or timeout
+        :raises: DRACUnexpectedReturnValue on return value mismatch
+        """
+        ready = False
+
+        # Try every 10 seconds over 2 minutes for the iDRAC to become ready
+        retries = 12
+        while not ready and retries > 0:
+            LOG.debug("Checking to see if the iDRAC is ready")
+            ready = self.is_idrac_ready()
+            if not ready:
+                LOG.debug("The iDRAC is not ready")
+                retries -= 1
+                if retries > 0:
+                    sleep(10)
+            else:
+                LOG.debug("The iDRAC is ready")
+
+        if retries == 0:
+            raise exceptions.DRACOperationFailed(drac_messages="Timed out "
+                                                 "waiting for the iDRAC to "
+                                                 "become ready")
+
 
 class WSManClient(wsman.Client):
     """Wrapper for wsman.Client with return value checking"""
