--- /usr/lib/python2.7/site-packages/dracclient/client.py	2019-11-14 19:39:49.304541029 +0000
+++ client.py.new	2019-11-14 19:39:24.639089436 +0000
@@ -33,7 +33,7 @@
 from dracclient import utils
 from dracclient import wsman
 
-IDRAC_IS_READY = "LC061"
+IDRAC_IS_READY = "0"
 
 LOG = logging.getLogger(__name__)
 
@@ -388,9 +388,12 @@
             cim_name='DCIM:iDRACCardService',
             target=idrac_fqdd)
 
-    def list_lifecycle_settings(self):
+    def list_lifecycle_settings(self, by_name=False):
         """List the Lifecycle Controller configuration settings
 
+        :param by_name: Controls whether returned dictionary uses Lifecycle
+                        attribute name as key. If set to False, instance_id
+                        will be used.
         :returns: a dictionary with the Lifecycle Controller settings using its
                   InstanceID as the key. The attributes are either
                   LCEnumerableAttribute or LCStringAttribute objects.
@@ -399,7 +402,49 @@
         :raises: DRACOperationFailed on error reported back by the DRAC
                  interface
         """
-        return self._lifecycle_cfg.list_lifecycle_settings()
+        return self._lifecycle_cfg.list_lifecycle_settings(by_name)
+
+    def is_lifecycle_in_recovery(self):
+        """Checks if Lifecycle Controller in recovery mode or not
+
+        This method checks the LCStatus value to determine if lifecycle
+        controller is in recovery mode by invoking GetRemoteServicesAPIStatus
+        from iDRAC.
+
+        :returns: a boolean indicating if lifecycle controller is in recovery
+        :raises: WSManRequestFailure on request failures
+        :raises: WSManInvalidResponse when receiving invalid response
+        :raises: DRACOperationFailed on error reported back by the DRAC
+                 interface
+        """
+
+        return self._lifecycle_cfg.is_lifecycle_in_recovery()
+
+    def set_lifecycle_settings(self, settings):
+        """Sets lifecycle controller configuration
+
+        It sets the pending_value parameter for each of the attributes
+        passed in. For the values to be applied, a config job must
+        be created.
+
+        :param settings: a dictionary containing the proposed values, with
+                         each key being the name of attribute and the value
+                         being the proposed value.
+        :returns: a dictionary containing:
+                 - The is_commit_required key with a boolean value indicating
+                   whether a config job must be created for the values to be
+                   applied.
+                 - The is_reboot_required key with a RebootRequired enumerated
+                   value indicating whether the server must be rebooted for the
+                   values to be applied. Possible values are true and false.
+        :raises: WSManRequestFailure on request failures
+        :raises: WSManInvalidResponse when receiving invalid response
+        :raises: DRACOperationFailed on error reported back by the DRAC
+                 interface
+        :raises: DRACUnexpectedReturnValue on return value mismatch
+        :raises: InvalidParameterValue on invalid Lifecycle attribute
+        """
+        return self._lifecycle_cfg.set_lifecycle_settings(settings)
 
     def list_system_settings(self):
         """List the System configuration settings
@@ -469,7 +514,9 @@
                           cim_system_name='DCIM:ComputerSystem',
                           reboot=False,
                           start_time='TIME_NOW',
-                          realtime=False):
+                          realtime=False,
+                          wait_for_idrac=True,
+                          method_name='CreateTargetedConfigJob'):
         """Creates a configuration job.
 
         In CIM (Common Information Model), weak association is used to name an
@@ -495,6 +542,10 @@
                            schedule_job_execution is called
         :param realtime: Indicates if reatime mode should be used.
                Valid values are True and False.
+        :param wait_for_idrac: indicates whether or not to wait for the
+                               iDRAC to be ready to accept commands before
+                               issuing the command.
+        :param method_name: method of CIM object to invoke
         :returns: id of the created job
         :raises: WSManRequestFailure on request failures
         :raises: WSManInvalidResponse when receiving invalid response
@@ -512,7 +563,9 @@
             cim_system_name=cim_system_name,
             reboot=reboot,
             start_time=start_time,
-            realtime=realtime)
+            realtime=realtime,
+            wait_for_idrac=wait_for_idrac,
+            method_name=method_name)
 
     def create_nic_config_job(
             self,
@@ -619,6 +672,10 @@
                            means execute immediately or None which means
                            the job will not execute until
                            schedule_job_execution is called
+        :param wait_for_idrac: indicates whether or not to wait for the
+                               iDRAC to be ready to accept commands before
+                               issuing the command.
+        :param method_name: method of CIM object to invoke
         :returns: id of the created job
         :raises: WSManRequestFailure on request failures
         :raises: WSManInvalidResponse when receiving invalid response
@@ -651,6 +708,37 @@
             cim_creation_class_name='DCIM_BIOSService',
             cim_name='DCIM:BIOSService', target=self.BIOS_DEVICE_FQDD)
 
+    def commit_pending_lifecycle_changes(
+            self,
+            reboot=False,
+            start_time='TIME_NOW'):
+        """Applies all pending changes on Lifecycle by creating a config job
+
+        :param reboot: indicates whether a RebootJob should also be
+                       created or not
+        :param start_time: start time for job execution in format
+                           yyyymmddhhmmss, the string 'TIME_NOW' which
+                           means execute immediately or None which means
+                           the job will not execute until
+                           schedule_job_execution is called
+        :returns: id of the created job
+        :raises: WSManRequestFailure on request failures
+        :raises: WSManInvalidResponse when receiving invalid response
+        :raises: DRACOperationFailed on error reported back by the DRAC
+                 interface, including start_time being in the past or
+                 badly formatted start_time
+        :raises: DRACUnexpectedReturnValue on return value mismatch
+        """
+        return self._job_mgmt.create_config_job(
+            resource_uri=uris.DCIM_LCService,
+            cim_creation_class_name='DCIM_LCService',
+            cim_name='DCIM:LCService',
+            target='',
+            reboot=reboot,
+            start_time=start_time,
+            wait_for_idrac=False,
+            method_name='CreateConfigJob')
+
     def get_lifecycle_controller_version(self):
         """Returns the Lifecycle controller version
 
@@ -788,6 +876,50 @@
         """
         return self._raid_mgmt.delete_virtual_disk(virtual_disk)
 
+    def reset_raid_config(self, raid_controller):
+        """Delete all the virtual disks and unassign all hot spare physical disks
+
+        The job to reset the RAID controller config will be in pending state.
+        For the changes to be applied, a config job must be created.
+
+        :param raid_controller: id of the RAID controller
+        :returns: a dictionary containing:
+                 - The is_commit_required key with the value always set to
+                   True indicating that a config job must be created to
+                   reset configuration.
+                 - The is_reboot_required key with a RebootRequired enumerated
+                   value indicating whether the server must be rebooted to
+                   reset configuration.
+        :raises: WSManRequestFailure on request failures
+        :raises: WSManInvalidResponse when receiving invalid response
+        :raises: DRACOperationFailed on error reported back by the DRAC
+                 interface
+        :raises: DRACUnexpectedReturnValue on return value mismatch
+        """
+        return self._raid_mgmt.reset_raid_config(raid_controller)
+
+    def clear_foreign_config(self, raid_controller):
+        """Free up foreign drives
+
+        The job to clear foreign config will be in pending state.
+        For the changes to be applied, a config job must be created.
+
+        :param raid_controller: id of the RAID controller
+        :returns: a dictionary containing:
+                 - The is_commit_required key with the value always set to
+                   True indicating that a config job must be created to
+                   clear foreign configuration.
+                 - The is_reboot_required key with a RebootRequired enumerated
+                   value indicating whether the server must be rebooted to
+                   clear foreign configuration.
+        :raises: WSManRequestFailure on request failures
+        :raises: WSManInvalidResponse when receiving invalid response
+        :raises: DRACOperationFailed on error reported back by the DRAC
+                 interface
+        :raises: DRACUnexpectedReturnValue on return value mismatch
+        """
+        return self._raid_mgmt.clear_foreign_config(raid_controller)
+
     def commit_pending_raid_changes(self, raid_controller, reboot=False,
                                     start_time='TIME_NOW', realtime=False):
         """Applies all pending changes on a RAID controller
@@ -1015,32 +1147,33 @@
 
     def change_physical_disk_state(self, mode,
                                    controllers_to_physical_disk_ids=None):
-        """Convert disks RAID status and return a list of controller IDs
+        """Convert disks RAID status
 
-        Builds a list of controller ids that have had disks converted to the
-        specified RAID status by:
-        - Examining all the disks in the system and filtering out any that are
-          not attached to a RAID/BOSS controller.
-        - Inspect the controllers' disks to see if there are any that need to
-          be converted, if so convert them. If a disk is already in the desired
-          status the disk is ignored. Also check for failed or unknown disk
-          statuses and raise an exception where appropriate.
-        - Return a list of controller IDs for controllers whom have had any of
-          their disks converted, and whether a reboot is required.
+        This method intelligently converts the requested physical disks from
+        RAID to JBOD or vice versa.  It does this by only converting the
+        disks that are not already in the correct state.
 
-        The caller typically should then create a config job for the list of
-        controllers returned to finalize the RAID configuration.
-
-        :param mode: constants.RaidStatus enumeration used to determine what
-                     raid status to check for.
+        :param mode: constants.RaidStatus enumeration that indicates the mode
+                     to change the disks to.
         :param controllers_to_physical_disk_ids: Dictionary of controllers and
-               corresponding disk ids we are inspecting and creating jobs for
-               when needed.
-        :returns: a dict containing the following key/values:
+               corresponding disk ids to convert to the requested mode.
+        :returns: a dictionary containing:
+                  - conversion_results, a dictionary that maps controller ids
+                    to the conversion results for that controller.  The
+                    conversion results are a dict that contains:
+                    - The is_commit_required key with the value always set to
+                      True indicating that a config job must be created to
+                      complete disk conversion.
+                    - The is_reboot_required key with a RebootRequired
+                      enumerated value indicating whether the server must be
+                      rebooted to complete disk conversion.
+                  Also contained in the main dict are the following key/values,
+                  which are deprecated, should not be used, and will be removed
+                  in a future release:
                   - is_reboot_required, a boolean stating whether a reboot is
-                  required or not.
+                    required or not.
                   - commit_required_ids, a list of controller ids that will
-                  need to commit their pending RAID changes via a config job.
+                    need to commit their pending RAID changes via a config job.
         :raises: DRACOperationFailed on error reported back by the DRAC and the
                  exception message does not contain NOT_SUPPORTED_MSG constant.
         :raises: Exception on unknown error.
@@ -1202,11 +1335,11 @@
                              expected_return_value=utils.RET_SUCCESS,
                              wait_for_idrac=False)
 
-        message_id = utils.find_xml(result,
-                                    'MessageID',
-                                    uris.DCIM_LCService).text
+        lc_status = utils.find_xml(result,
+                                   'LCStatus',
+                                   uris.DCIM_LCService).text
 
-        return message_id == IDRAC_IS_READY
+        return lc_status == IDRAC_IS_READY
 
     def wait_until_idrac_is_ready(self, retries=None, retry_delay=None):
         """Waits until the iDRAC is in a ready state
