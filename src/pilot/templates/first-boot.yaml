# Copyright (c) 2016-2021 Dell Inc. or its subsidiaries.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

heat_template_version: rocky

resources:
  userdata:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: set_os_limits}
      - config: {get_resource: wipe_disk}

  set_os_limits:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        bootcmd:
        - sed -ie 's/[[:space:]]\+/ /g' /etc/security/limits.conf; grep -v '^#' /etc/security/limits.conf | grep -q '^* soft nofile' && sed -i 's/^* soft nofile.*/* soft nofile 64000/' /etc/security/limits.conf || echo '* soft nofile 64000' >> /etc/security/limits.conf
        - sed -ie 's/[[:space:]]\+/ /g' /etc/security/limits.conf; grep -v '^#' /etc/security/limits.conf | grep -q '^* hard nofile' && sed -i 's/^* hard nofile.*/* hard nofile 64000/' /etc/security/limits.conf || echo '* hard nofile 64000' >> /etc/security/limits.conf
        - sed -ie 's/[[:space:]]\+/ /g' /etc/security/limits.d/20-nproc.conf; grep -v '^#' /etc/security/limits.d/20-nproc.conf | grep -q '^* soft nproc' && sed -i 's/^* soft nproc.*/* soft nproc 10240/' /etc/security/limits.d/20-nproc.conf || echo '* soft nproc 10240' >> /etc/security/limits.d/20-nproc.conf
        - sed -ie 's/[[:space:]]\+/ /g' /etc/security/limits.d/20-nproc.conf; grep -v '^#' /etc/security/limits.d/20-nproc.conf | grep -q '^root soft nproc' && sed -i 's/^root soft nproc.*/root soft nproc unlimited/' /etc/security/limits.d/20-nproc.conf || echo 'root soft nproc unlimited' >> /etc/security/limits.d/20-nproc.conf

  wipe_disk:
    type: OS::Heat::SoftwareConfig
    properties:
      config: |
        #!/bin/bash
        if [[ $HOSTNAME =~ "storage" ]] || [[ $HOSTNAME =~ "computehci" ]]; then
        {
          # LVM partitions are always in use by the kernel.  Destroy all of the
          # LVM components here so the disks are not in use and sgdisk and
          # partprobe can do their thing

          # Destroy all the logical volumes and volume groups
          vgs --noheadings -o vg_name | awk '{print $1}' | while read lvg;
          do
              cmd="lvremove -f $lvg"
              echo $cmd
              $cmd

              cmd="vgremove -f $lvg"
              echo $cmd
              $cmd
          done

          # Destroy all the physical volumes
          pvs --noheadings -o pv_name | awk '{print $1}' | while read pv;
          do
              cmd="pvremove -ff $pv"
              echo $cmd
              $cmd
          done

          lsblk -dno NAME,TYPE | \
          while read disk type; do
            # Skip if the device type isn't "disk" or if it's mounted
            [ "${type}" == "disk" ] || continue
            device="/dev/${disk}"
            if grep -q ^${device}[1-9] /proc/mounts; then
              echo "Skipping ${device} because it's mounted"
              continue
            fi

            # Delete all of the partitions on the disk
            partitions=$(parted -sm $device print|tail -n +3|awk -F: '{print $1}')
            for partition in $partitions; do
                cmd="parted -s $device rm $partition"
                echo $cmd
                $cmd
            done

            # In case the disk has a non-gpt partition type, convert it to gpt
            cmd="parted -s $device mklabel gpt"
            echo $cmd
            $cmd

            # Zap the disk for good measure
            cmd="sgdisk -Z $device"
            echo $cmd
            $cmd

            echo "Partitioning disk: ${disk}"
            cmd="sgdisk -og ${device}"
            echo $cmd
            $cmd
            echo

            # Remove signatures
            cmd="wipefs -a ${device}"
            echo $cmd
            $cmd
            echo

          done
          partprobe
          parted -lm
        } > /root/wipe-disk.txt 2>&1
        fi

outputs:
  OS::stack_id:
    value: {get_resource: userdata}
