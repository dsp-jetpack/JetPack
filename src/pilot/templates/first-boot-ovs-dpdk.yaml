# Copyright (c) 2016-2018 Dell Inc. or its subsidiaries.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

heat_template_version: 2014-10-16

parameters:
  HugePages:
    description: >
      Space seprated list of Kernel args to be update to grub.
      Example: "default_hugepagesz=1GB hugepagesz=1G hugepages=96"
    type: string
    default: ""
  NeutronDpdkSocketMemory:
    description: Memory allocated for each socket
    default: ""
    type: string
  NeutronVhostuserSocketDir:
    description: The vhost-user socket directory for OVS.
    default: ""
    type: string
  DpdkInterfaces:
    description: Interfaces that are used by OVS-DPDK
    type: string
  VcpuPinSet:
    description: list of Vcpu Pin Set
    type: string
  HostOsCpus:
    description: list of Host OS CPUs
    type: string
  VmWeight:
    description: >
      Used along with PmdWeight, to divide the cores into two groups. For every 
      'N' number of cores assigned for VM, 'M' cores are assigned to PMD list. 
    type: number
    default: 4
  PmdWeight:  
    description: >
      Used along with VmWeight, to divide the cores into two groups. For every 
      'N' number of cores assigned for VM, 'M' cores are assigned to PMD list. 
    type: number
    default: 1
  BufferPoolSize:
    description: >
      Configures MariaDB BufferPoolSize
    type: string
    default: "dynamic"

  BufferPoolInstances:
    description: >
      Configures MariaDB BufferPoolInstances
    type: number
    default: 16
    
resources:
  userdata:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: wipe_disk}
      - config: {get_resource: generate_parameters}
      - config: {get_resource: set_ovs_config}
      - config: {get_resource: set_dpdk_params}
      - config: {get_resource: install_tuned}
      - config: {get_resource: set_os_limits}
      - config: {get_resource: performance_optimization}
      - config: {get_resource: kernel_args}

  wipe_disk:
    type: OS::Heat::SoftwareConfig
    properties:
      config: |
        #!/bin/bash
        if [[ $HOSTNAME =~ "cephstorage" ]]; then
        {
          # LVM partitions are always in use by the kernel.  Destroy all of the
          # LVM components here so the disks are not in use and sgdisk and
          # partprobe can do their thing

          # Destroy all the logical volumes and volume groups
          vgs --noheadings -o vg_name | awk '{print $1}' | while read lvg;
          do
              cmd="lvremove -f $lvg"
              echo $cmd
              $cmd

              cmd="vgremove -f $lvg"
              echo $cmd
              $cmd
          done

          # Destroy all the physical volumes
          pvs --noheadings -o pv_name | awk '{print $1}' | while read pv;
          do
              cmd="pvremove -ff $pv"
              echo $cmd
              $cmd
          done

          lsblk -dno NAME,TYPE | \
          while read disk type; do
            # Skip if the device type isn't "disk" or if it's mounted
            [ "${type}" == "disk" ] || continue
            device="/dev/${disk}"
            if grep -q ^${device}[1-9] /proc/mounts; then
              echo "Skipping ${device} because it's mounted"
              continue
            fi

            # Delete all of the partitions on the disk
            partitions=$(parted -sm $device print|tail -n +3|awk -F: '{print $1}')
            for partition in $partitions; do
                cmd="parted -s $device rm $partition"
                echo $cmd
                $cmd
            done

            # In case the disk has a non-gpt partition type, convert it to gpt
            cmd="parted -s $device mklabel gpt"
            echo $cmd
            $cmd

            # Zap the disk for good measure
            cmd="sgdisk -Z $device"
            echo $cmd
            $cmd

            echo "Partitioning disk: ${disk}"
            cmd="sgdisk -og ${device}"
            echo $cmd
            $cmd
            echo
          done
          partprobe
          parted -lm
        } > /root/wipe-disk.txt 2>&1
        fi

  generate_parameters:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            #!/bin/python
            import subprocess
            import socket
            import ConfigParser

            if 'compute' in socket.gethostname():
                pass
            else:
                exit()

            def hyphen_range(s):
                s = "".join(s.split())#removes white space
                r = set()
                for x in s.split(','):
                    t = x.split('-')
                    if len(t) not in [1,2]:
                        raise SyntaxError("Incorrect Format.")
                    if len(t) == 1:
                        r.add(int(t[0]))
                    else:
                        r.update(set(range(int(t[0]),int(t[1])+1)))
                l = list(r)
                l.sort()
                for i in range(len(l)):
                    l[i] = str(l[i])
                return l

            if __name__ == '__main__':
                DPDK_INTERFACES = "$DPDKINT"
                VM_WEIGHT = $VMWEIGHT # sibling pairs
                PMD_WEIGHT = $PMDWEIGHT # sibling pairs
                HOST_CPUS_LIST = "$HOSTCPUSLIST"
                VCPU_PIN_SET = "$VCPUPINSET"
                Config = ConfigParser.ConfigParser()

                dpdk_interfaces = DPDK_INTERFACES.replace(" ","")
                dpdk_interfaces = dpdk_interfaces.replace("'","")
                dpdk_interfaces = dpdk_interfaces.replace('"',"").split(',')
                if len(dpdk_interfaces) <= 0:
                    exit(1)
                dpdk_interfaces_dict = {}
                for i in dpdk_interfaces:
                    aff_cmd = 'cat /sys/class/net/' + i + '/device/numa_node'
                    out = subprocess.Popen(aff_cmd,shell=True,
                          stdout=subprocess.PIPE).stdout.read().rstrip()
                    dpdk_interfaces_dict[i] = int(out)

                ovs_lcore_cpus = map(lambda a, b: (a, b),
                                     *map(hyphen_range, HOST_CPUS_LIST.strip().split(',')))
                vm_cpus = map(lambda a, b: (a, b),
                              *map(hyphen_range, VCPU_PIN_SET.strip().split(',')))
                pmd_cpus = []
                numa_node_zero_siblings = []
                numa_node_one_siblings = []

                for sibling in vm_cpus:
                    if int(sibling[0]) % 2 == 0:
                        numa_node_zero_siblings.append(sibling)
                    else:
                        numa_node_one_siblings.append(sibling)

                sibling_sets_list = [numa_node_zero_siblings, numa_node_one_siblings]
                #PMD RULES:
                extra_cpu_allocated = [0] * len(sibling_sets_list)
                for pf in dpdk_interfaces:
                    n = dpdk_interfaces_dict[pf]
                    if extra_cpu_allocated[n] != 0:
                        extra_cpu_allocated[n] -= 1
                    else:
                        pmd_cpus.append(sibling_sets_list[n][0])
                        del sibling_sets_list[n][0]
                        extra_cpu_allocated[n] += 1

                pmd_percentage = float(PMD_WEIGHT)/(VM_WEIGHT + PMD_WEIGHT)
                weight_of_one_vcpu = ( 0.5 * VM_WEIGHT ) / PMD_WEIGHT

                for i in range(len(sibling_sets_list)):
                    cpus = len(sibling_sets_list[i])
                    cpus -= (extra_cpu_allocated[i] * weight_of_one_vcpu)
                    pmd = cpus * pmd_percentage
                    pmd_int = int(pmd)
                    if pmd - pmd_int > 0.25:
                        pmd_int += 1
                    pmd_cpus += sibling_sets_list[i][:pmd_int]
                    del sibling_sets_list[i][:pmd_int]

                ovs_lcore_list = reduce(lambda x,y:x+y, map(list, ovs_lcore_cpus))
                ovs_lcore_list = ",".join(ovs_lcore_list)

                pmd_list = reduce(lambda x,y:x+y, map(list, pmd_cpus))
                vm_list = reduce(lambda x,y:x+y, sibling_sets_list)
                vm_list = reduce(lambda x,y:x+y, map(list, vm_list))
                vm_list = ",".join(vm_list)
                pmd_list = ",".join(pmd_list)
                with open("/root/parameters.ini", 'w') as f:
                    Config.set('DEFAULT', 'HostCPUs', ovs_lcore_list)
                    Config.set('DEFAULT', 'PMDCPUs', pmd_list)
                    Config.set('DEFAULT', 'NovaCPUs', vm_list)
                    Config.write(f)

          params:
            $DPDKINT: {get_param: DpdkInterfaces}
            $VMWEIGHT: {get_param: VmWeight}
            $PMDWEIGHT: {get_param: PmdWeight}
            $VCPUPINSET: {get_param: VcpuPinSet}
            $HOSTCPUSLIST: {get_param: HostOsCpus}

  set_ovs_config:
    type: OS::Heat::SoftwareConfig
    properties:
      config: |
        #!/bin/bash
        set -x
        if [[ $HOSTNAME =~ "compute" ]] ; then 
          if [ -f /usr/lib/systemd/system/openvswitch-nonetwork.service ]; then
            ovs_service_path="/usr/lib/systemd/system/openvswitch-nonetwork.service"
          elif [ -f /usr/lib/systemd/system/ovs-vswitchd.service ]; then
            ovs_service_path="/usr/lib/systemd/system/ovs-vswitchd.service"
          fi
          grep -q "RuntimeDirectoryMode=.*" $ovs_service_path
          if [ "$?" -eq 0 ]; then
            sed -i 's/RuntimeDirectoryMode=.*/RuntimeDirectoryMode=0775/' $ovs_service_path
          else
            echo "RuntimeDirectoryMode=0775" >> $ovs_service_path
          fi
          grep -Fxq "Group=qemu" $ovs_service_path
          if [ ! "$?" -eq 0 ]; then
            echo "Group=qemu" >> $ovs_service_path
          fi
          grep -Fxq "UMask=0002" $ovs_service_path
          if [ ! "$?" -eq 0 ]; then
            echo "UMask=0002" >> $ovs_service_path
          fi
          ovs_ctl_path='/usr/share/openvswitch/scripts/ovs-ctl'
          grep -q "umask 0002 \&\& start_daemon \"\$OVS_VSWITCHD_PRIORITY\"" $ovs_ctl_path
          if [ ! "$?" -eq 0 ]; then
            sed -i 's/start_daemon \"\$OVS_VSWITCHD_PRIORITY.*/umask 0002 \&\& start_daemon \"$OVS_VSWITCHD_PRIORITY\" \"$OVS_VSWITCHD_WRAPPER\" \"$@\"/' $ovs_ctl_path
          fi
        fi

  # Verify the logs on /var/log/cloud-init.log on the overcloud node
  set_dpdk_params:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -x
            get_mask()
            {
              local list=$1
              local mask=0
              declare -a bm
              max_idx=0
              for core in $(echo $list | sed 's/,/ /g')
              do
                  index=$(($core/32))
                  bm[$index]=0
                  if [ $max_idx -lt $index ]; then
                     max_idx=$(($index))
                  fi
              done
              for ((i=$max_idx;i>=0;i--));
              do
                  bm[$i]=0
              done
              for core in $(echo $list | sed 's/,/ /g')
              do
                  index=$(($core/32))
                  temp=$((1<<$(($core % 32))))
                  bm[$index]=$((${bm[$index]} | $temp))
              done

              printf -v mask "%x" "${bm[$max_idx]}"
              for ((i=$max_idx-1;i>=0;i--));
              do
                  printf -v hex "%08x" "${bm[$i]}"
                  mask+=$hex
              done
              printf "%s" "$mask"
            }

            if [[ $HOSTNAME =~ "compute" ]] ; then
              PMD_CORES=$(crudini --get /root/parameters.ini DEFAULT pmdcpus)
              LCORE_LIST=$(crudini --get /root/parameters.ini DEFAULT hostcpus)
              pmd_cpu_mask=$( get_mask $PMD_CORES )
              host_cpu_mask=$( get_mask $LCORE_LIST )
              socket_mem=$(echo $SOCKET_MEMORY | sed s/\'//g )
              ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-init=true
              ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-socket-mem=$socket_mem
              ovs-vsctl --no-wait set Open_vSwitch . other_config:pmd-cpu-mask=$pmd_cpu_mask
              ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-lcore-mask=$host_cpu_mask
            fi
          params:
            $SOCKET_MEMORY: {get_param: NeutronDpdkSocketMemory}

  install_tuned:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -x
            if [[ $HOSTNAME =~ "compute" ]] ; then
              tuned_conf_path="/etc/tuned/cpu-partitioning-variables.conf"
              grep -q "^isolated_cores" $tuned_conf_path
              if [ "$?" -eq 0 ]; then
                sed -i 's/^isolated_cores=.*/isolated_cores=$VCPUPINSET/' $tuned_conf_path
              else
                echo "isolated_cores=$VCPUPINSET" >> $tuned_conf_path
              fi
              tuned-adm profile cpu-partitioning
            fi

          params:
            $VCPUPINSET: {get_param: VcpuPinSet}

  kernel_args:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            #!/bin/bash
            if [[ $(hostname) == *compute* ]] ; then
              sudo grubby --update-kernel=ALL --args="_HugePages_"
              echo "HugePages are applied"
              sudo grubby --update-kernel=ALL --args="isolcpus=_NumaCpus_"
              echo "Numa is applied"
              reboot
            fi >> /tmp/grubby.log 2>&1

          params:
            _HugePages_: {get_param: HugePages}
            _NumaCpus_: {get_param: VcpuPinSet}

  set_os_limits:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        bootcmd:
        - sed -ie 's/[[:space:]]\+/ /g' /etc/security/limits.conf; grep -v '^#' /etc/security/limits.conf | grep -q '^* soft nofile' && sed -i 's/^* soft nofile.*/* soft nofile 64000/' /etc/security/limits.conf || echo '* soft nofile 64000' >> /etc/security/limits.conf
        - sed -ie 's/[[:space:]]\+/ /g' /etc/security/limits.conf; grep -v '^#' /etc/security/limits.conf | grep -q '^* hard nofile' && sed -i 's/^* hard nofile.*/* hard nofile 64000/' /etc/security/limits.conf || echo '* hard nofile 64000' >> /etc/security/limits.conf
        - sed -ie 's/[[:space:]]\+/ /g' /etc/security/limits.d/20-nproc.conf; grep -v '^#' /etc/security/limits.d/20-nproc.conf | grep -q '^* soft nproc' && sed -i 's/^* soft nproc.*/* soft nproc 10240/' /etc/security/limits.d/20-nproc.conf || echo '* soft nproc 10240' >> /etc/security/limits.d/20-nproc.conf
        - sed -ie 's/[[:space:]]\+/ /g' /etc/security/limits.d/20-nproc.conf; grep -v '^#' /etc/security/limits.d/20-nproc.conf | grep -q '^root soft nproc' && sed -i 's/^root soft nproc.*/root soft nproc unlimited/' /etc/security/limits.d/20-nproc.conf || echo 'root soft nproc unlimited' >> /etc/security/limits.d/20-nproc.conf

  performance_optimization:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            #!/bin/bash
            if [[ $(hostname) == *controller* ]] ; then

              # Openstack Service - Cinder
              sed -i "s/transport_url    \=.*/&\n    rpc_response_timeout    => 180,/" /etc/puppet/modules/cinder/manifests/init.pp
              # Openstack Service - Glance
              sed -i 's/rpc_response_timeout \=.*/rpc_response_timeout = 180,/' /etc/puppet/modules/oslo/manifests/messaging/default.pp

              # MariaDB Optimization

              bsize=_BufferPoolSize_
              if [ "$bsize" == "dynamic" ]; then
              buffer=$(echo $((`free -m | awk 'NR==2{printf "%d", $2*0.75 }'`/1024))G)
              sed -i "s/innodb_buffer_pool_size    \=.*/innodb_buffer_pool_size    = $buffer,/" /etc/puppet/modules/tripleo/manifests/profile/base/database/mysql.pp
              else
              sed -i "s/innodb_buffer_pool_size    \=.*/innodb_buffer_pool_size    = _BufferPoolSize_,/" /etc/puppet/modules/tripleo/manifests/profile/base/database/mysql.pp
              fi
              sed -i "s/max_connections'         \=.*/&\n        'innodb_log_file_size' => 1500M,/" /etc/puppet/modules/tripleo/manifests/profile/base/database/mysql.pp
              sed -i "s/max_connections'         \=.*/&\n        'innodb_log_files_in_group'         => 2,/" /etc/puppet/modules/tripleo/manifests/profile/base/database/mysql.pp
              sed -i "s/max_connections'         \=.*/&\n        'innodb_flush_method'         => O_DIRECT,/" /etc/puppet/modules/tripleo/manifests/profile/base/database/mysql.pp
              sed -i "s/max_connections'         \=.*/&\n        'innodb_file_per_table'         => 1,/" /etc/puppet/modules/tripleo/manifests/profile/base/database/mysql.pp
              sed -i "s/max_connections'         \=.*/&\n        'innodb_buffer_pool_instances'         => _BufferPoolInstances_,/" /etc/puppet/modules/tripleo/manifests/profile/base/database/mysql.pp

            fi >> /tmp/performance_optimization.log 2>&1

          params:
            _BufferPoolSize_: {get_param: BufferPoolSize}
            _BufferPoolInstances_: {get_param: BufferPoolInstances}

outputs:
  OS::stack_id:
    value: {get_resource: userdata}
