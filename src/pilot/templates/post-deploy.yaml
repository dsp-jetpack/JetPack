heat_template_version: 2014-10-16

description: >
  Extra config for post-deployment

parameters:
  servers:
    type: json

resources:
  ExtraConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/bin/bash
        if [[ $HOSTNAME =~ "cephstorage" ]]; then
        {
          echo "Apply ceph_tuning to ceph.conf..."
          hiera ceph_tuning {} | python -c "
        import ast, os, sys
        input = ' '.join(map(str.strip, sys.stdin.readlines()))
        ceph_tuning = ast.literal_eval(input.replace('=>', ': '))

        conf_cur = '/etc/ceph/ceph.conf'
        lines = open(conf_cur, 'r').readlines()
        beg_marker = '# Start of ceph_tuning\n'
        end_marker = '# End of ceph_tuning\n'
        try:
            # Remove any prior ceph_tuning
            beg_index = lines.index(beg_marker)
            end_index = lines.index(end_marker) + 1
            lines[beg_index:end_index] = []
        except:
            pass

        conf_new = conf_cur + '.new'
        f = open(conf_new, 'w')
        for line in lines:
            f.write(line)
            if ceph_tuning and '[global]' in line:
                f.write(beg_marker)
                for entry in ceph_tuning:
                    f.write('{} = {}\n'.format(entry, ceph_tuning[entry]))
                f.write(end_marker)

        f.close()
        os.rename(conf_new, conf_cur)
        "
          echo "Restarting Ceph..."
          systemctl restart ceph
        } |& tee /root/post-deploy.txt
        fi
        # BEGIN workaround for BZ 1283721
        if [[ $HOSTNAME =~ "cephstorage-0" ]]; then
        {
          echo "Checking Ceph pools pg_num..."
          sleep 10
          hiera ceph_pool_pgs {} | HOME="/root" python -c "
        import ast, re, subprocess, sys, time
        def issue_cmd(cmd):
            print(cmd)
            for i in range(1, 10):
                try:
                    return subprocess.check_output(cmd.split(), stderr=subprocess.STDOUT)
                except subprocess.CalledProcessError as e:
                    if 'EBUSY' in e.output:
                        print '  Cluster is busy, retrying...'
                        time.sleep(5)
                    else:
                        print '{}\nAborting due to fatal error.'.format(e.output)
                        sys.exit(1)
        
            print 'Aborting due to excessive retries.'
            sys.exit(1)
        
        def set_pg_num(pool, pg_num):
            out = issue_cmd('ceph osd pool get {} pg_num'.format(pool))
            print(out)
            m = re.search('(\S*)(pg_num: )(\d+)(\S*)', out)
            if not m:
                print 'Aborting due to error reading current pg_num.'
                sys.exit(1)
            
            pg_cur = int(m.group(3))
            if pg_cur == pg_num:
                print 'Pool \'{}\' pg_num already set to {}'.format(pool, pg_num)
            elif pg_cur > pg_num:
                print 'Cannot decrease pool \'{}\' pg_num from {} to {}'.format(pool, pg_cur, pg_num)
            else:
                print 'Increasing pool \'{}\' pg_num from {} to {}'.format(pool, pg_cur, pg_num)
                while pg_cur < pg_num:
                    pg_cur *= 2
                    if pg_cur > pg_num:
                        pg_cur = pg_num
        
                    issue_cmd('ceph osd pool set {} pg_num {}'.format(pool, pg_cur))
                    time.sleep(10)
        
                issue_cmd('ceph osd pool set {} pgp_num {}'.format(pool, pg_num))
        
        input = ' '.join(map(str.strip, sys.stdin.readlines()))
        pool_pgs = ast.literal_eval(input.replace('=>', ': '))
        for pool in pool_pgs:
            set_pg_num(pool, pool_pgs[pool])
        "
        } |& tee -a /root/post-deploy.txt
        fi
        # END workaround for BZ 1283721

  ExtraDeployments:
    type: OS::Heat::SoftwareDeployments
    properties:
      servers:  {get_param: servers}
      config: {get_resource: ExtraConfig}
      actions: ['CREATE', 'UPDATE' ] # Only do this on CREATE or UPDATE
