--- job.py	2020-05-09 00:31:44.000000000 -0400
+++ job.py.new	2020-09-08 15:50:32.973927358 -0400
@@ -17,15 +17,17 @@
 
 from oslo_log import log as logging
 from oslo_utils import importutils
+import retrying
 
 from ironic.common import exception
 from ironic.common.i18n import _
+from ironic.conf import CONF
 from ironic.drivers.modules.drac import common as drac_common
 
 drac_exceptions = importutils.try_import('dracclient.exceptions')
 
 LOG = logging.getLogger(__name__)
-
+WAIT_CLOCK = 5
 
 def validate_job_queue(node, name_prefix=None):
     """Validates the job queue on the node.
@@ -86,3 +88,27 @@
                   {'node_uuid': node.uuid,
                    'error': exc})
         raise exception.DracOperationError(error=exc)
+
+
+@retrying.retry(
+    retry_on_exception=lambda e: isinstance(e, exception.DracOperationError),
+    stop_max_attempt_number=CONF.drac.config_job_max_retries,
+    wait_fixed=WAIT_CLOCK * 1000)
+def wait_for_job_completion(node,
+                            retries=CONF.drac.config_job_max_retries):
+    """Wait for job to complete
+
+    It will wait for the job to complete for 20 minutes and raises timeout
+    if job never complete within given interval of time.
+    :param node: an ironic node object.
+    :param retries: no of retries to make conductor wait.
+    :raises: DracOperationError on exception raised from python-dracclient
+    or a timeout while waiting for job completion.
+    """
+    if not list_unfinished_jobs(node):
+        return
+    err_msg = _(
+        'There are unfinished jobs in the job '
+        'queue on node %(node_uuid)r ') % {'node_uuid': node.uuid}
+    LOG.warning(err_msg)
+    raise exception.DracOperationError(error=err_msg)
