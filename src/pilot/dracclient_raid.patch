--- raid.py.orig	2019-06-04 04:56:04.000000000 +0000
+++ raid_modified.py	2020-02-17 11:58:54.234844526 +0000
@@ -12,6 +12,7 @@
 #    under the License.
 
 import collections
+import copy
 import logging
 
 from dracclient import constants
@@ -81,7 +82,10 @@
     ['id', 'description', 'controller', 'manufacturer', 'model', 'media_type',
      'interface_type', 'size_mb', 'free_size_mb', 'serial_number',
      'firmware_version', 'status', 'raid_status', 'sas_address',
-     'device_protocol'])
+     'device_protocol', 'bus'])
+
+
+NO_FOREIGN_DRIVES = ["STOR058", "STOR018"]
 
 
 class PhysicalDisk(PhysicalDiskTuple):
@@ -197,7 +201,7 @@
                                                'PrimaryStatus')],
             firmware_version=self._get_raid_controller_attr(
                 drac_controller, 'ControllerFirmwareVersion'),
-            bus=self._get_raid_controller_attr(drac_controller, 'Bus'),
+            bus=self._get_raid_controller_attr(drac_controller, 'Bus').upper(),
             supports_realtime=RAID_CONTROLLER_IS_REALTIME[
                 self._get_raid_controller_attr(
                     drac_controller, 'RealtimeCapability')])
@@ -231,7 +235,12 @@
         drac_raid_level = self._get_virtual_disk_attr(drac_disk, 'RAIDTypes')
         size_b = self._get_virtual_disk_attr(drac_disk, 'SizeInBytes')
         drac_status = self._get_virtual_disk_attr(drac_disk, 'PrimaryStatus')
-        drac_raid_status = self._get_virtual_disk_attr(drac_disk, 'RAIDStatus')
+        drac_raid_status = self._get_virtual_disk_attr(
+            drac_disk, 'RAIDStatus', allow_missing=True)
+        if drac_raid_status is None:
+            drac_raid_status = self._get_virtual_disk_attr(
+                drac_disk, 'RaidStatus')
+
         drac_pending_operations = self._get_virtual_disk_attr(
             drac_disk, 'PendingOperations')
 
@@ -256,10 +265,12 @@
             physical_disks=self._get_virtual_disk_attrs(drac_disk,
                                                         'PhysicalDiskIDs'))
 
-    def _get_virtual_disk_attr(self, drac_disk, attr_name, nullable=False):
+    def _get_virtual_disk_attr(self, drac_disk, attr_name,
+                               nullable=False, allow_missing=False):
         return utils.get_wsman_resource_attr(
             drac_disk, uris.DCIM_VirtualDiskView, attr_name,
-            nullable=nullable)
+            nullable=nullable,
+            allow_missing=allow_missing)
 
     def _get_virtual_disk_attrs(self, drac_disk, attr_name):
         return utils.get_all_wsman_resource_attrs(
@@ -315,7 +326,12 @@
         drac_media_type = self._get_physical_disk_attr(drac_disk, 'MediaType',
                                                        uri)
         drac_bus_protocol = self._get_physical_disk_attr(drac_disk,
-                                                         'BusProtocol', uri)
+                                                         'BusProtocol', uri)
+        bus = self._get_physical_disk_attr(drac_disk,
+                                           'Bus', uri,  allow_missing=True)
+
+        if bus is not None:
+            bus = bus.upper()
 
         return PhysicalDisk(
             id=fqdd,
@@ -341,7 +357,8 @@
             device_protocol=self._get_physical_disk_attr(drac_disk,
                                                          'DeviceProtocol',
                                                          uri,
-                                                         allow_missing=True))
+                                                         allow_missing=True),
+            bus=bus)
 
     def _get_physical_disk_attr(self, drac_disk, attr_name, uri,
                                 allow_missing=False):
@@ -633,15 +650,17 @@
         :param mode: constants.RaidStatus enumeration used to
                      determine what raid status to check for.
         :param physical_disks: all physical disks
-        :param controllers_to_physical_disk_ids: Dictionary of controllers
-                     we are inspecting and creating jobs for when needed. If
-                     needed modify this dict so that only drives that need to
-                     be changed to RAID or JBOD are in the list of disk keys
-                     for corresponding controller.
+        :param controllers_to_physical_disk_ids: Dictionary of controllers and
+               corresponding disk ids to convert to the requested mode.
+        :returns: a dictionary mapping controller FQDDs to the list of
+                  physical disks that need to be converted for that controller.
         :raises: ValueError: Exception message will list failed drives and
                      drives whose state cannot be changed at this time, drive
                      state is not "ready" or "non-RAID".
         """
+        controllers_to_physical_disk_ids = copy.deepcopy(
+            controllers_to_physical_disk_ids)
+
         p_disk_id_to_status = {}
         for physical_disk in physical_disks:
             p_disk_id_to_status[physical_disk.id] = physical_disk.raid_status
@@ -700,34 +719,37 @@
 
             raise ValueError(error_msg)
 
+        return controllers_to_physical_disk_ids
+
     def change_physical_disk_state(self, mode,
                                    controllers_to_physical_disk_ids=None):
-        """Convert disks RAID status and return a list of controller IDs
+        """Convert disks RAID status
 
-        Builds a list of controller ids that have had disks converted to the
-        specified RAID status by:
-        - Examining all the disks in the system and filtering out any that are
-          not attached to a RAID/BOSS controller.
-        - Inspect the controllers' disks to see if there are any that need to
-          be converted, if so convert them. If a disk is already in the desired
-          status the disk is ignored. Also check for failed or unknown disk
-          statuses and raise an exception where appropriate.
-        - Return a list of controller IDs for controllers whom have had any of
-          their disks converted, and whether a reboot is required.
+        This method intelligently converts the requested physical disks from
+        RAID to JBOD or vice versa.  It does this by only converting the
+        disks that are not already in the correct state.
 
-        The caller typically should then create a config job for the list of
-        controllers returned to finalize the RAID configuration.
-
-        :param mode: constants.RaidStatus enumeration used to determine what
-                     raid status to check for.
+        :param mode: constants.RaidStatus enumeration that indicates the mode
+                     to change the disks to.
         :param controllers_to_physical_disk_ids: Dictionary of controllers and
-               corresponding disk ids we are inspecting and creating jobs for
-               when needed.
-        :returns: a dict containing the following key/values:
+               corresponding disk ids to convert to the requested mode.
+        :returns: a dictionary containing:
+                  - conversion_results, a dictionary that maps controller ids
+                    to the conversion results for that controller.  The
+                    conversion results are a dict that contains:
+                    - The is_commit_required key with the value always set to
+                      True indicating that a config job must be created to
+                      complete disk conversion.
+                    - The is_reboot_required key with a RebootRequired
+                      enumerated value indicating whether the server must be
+                      rebooted to complete disk conversion.
+                  Also contained in the main dict are the following key/values,
+                  which are deprecated, should not be used, and will be removed
+                  in a future release:
                   - is_reboot_required, a boolean stating whether a reboot is
-                  required or not.
+                    required or not.
                   - commit_required_ids, a list of controller ids that will
-                  need to commit their pending RAID changes via a config job.
+                    need to commit their pending RAID changes via a config job.
         :raises: DRACOperationFailed on error reported back by the DRAC and the
                  exception message does not contain NOT_SUPPORTED_MSG constant.
         :raises: Exception on unknown error.
@@ -754,13 +776,14 @@
         Raise exception if there are any failed drives or
         drives not in status 'ready' or 'non-RAID'
         '''
-        self._check_disks_status(mode, physical_disks,
-                                 controllers_to_physical_disk_ids)
+        final_ctls_to_phys_disk_ids = self._check_disks_status(
+                mode, physical_disks, controllers_to_physical_disk_ids)
 
         is_reboot_required = False
         controllers = []
+        controllers_to_results = {}
         for controller, physical_disk_ids \
-                in controllers_to_physical_disk_ids.items():
+                in final_ctls_to_phys_disk_ids.items():
             if physical_disk_ids:
                 LOG.debug("Converting the following disks to {} on RAID "
                           "controller {}: {}".format(
@@ -773,22 +796,39 @@
                     if constants.NOT_SUPPORTED_MSG in str(ex):
                         LOG.debug("Controller {} does not support "
                                   "JBOD mode".format(controller))
-                        pass
+                        controllers_to_results[controller] = \
+                            utils.build_return_dict(
+                                doc=None,
+                                resource_uri=None,
+                                is_commit_required_value=False,
+                                is_reboot_required_value=constants.
+                                RebootRequired.false)
                     else:
                         raise
                 else:
-                    if conversion_results:
-                        reboot_true = constants.RebootRequired.true
-                        reboot_optional = constants.RebootRequired.optional
-                        _is_reboot_required = \
-                            conversion_results["is_reboot_required"]
-                        is_reboot_required = is_reboot_required \
-                            or (_is_reboot_required
-                                in [reboot_true, reboot_optional])
-                        if conversion_results["is_commit_required"]:
-                            controllers.append(controller)
+                    controllers_to_results[controller] = conversion_results
+
+                    # Remove the code below when is_reboot_required and
+                    # commit_required_ids are deprecated
+                    reboot_true = constants.RebootRequired.true
+                    reboot_optional = constants.RebootRequired.optional
+                    _is_reboot_required = \
+                        conversion_results["is_reboot_required"]
+                    is_reboot_required = is_reboot_required \
+                        or (_is_reboot_required
+                            in [reboot_true, reboot_optional])
+                    controllers.append(controller)
+            else:
+                controllers_to_results[controller] = \
+                    utils.build_return_dict(
+                        doc=None,
+                        resource_uri=None,
+                        is_commit_required_value=False,
+                        is_reboot_required_value=constants.
+                        RebootRequired.false)
 
-        return {'is_reboot_required': is_reboot_required,
+        return {'conversion_results': controllers_to_results,
+                'is_reboot_required': is_reboot_required,
                 'commit_required_ids': controllers}
 
     def is_realtime_supported(self, raid_controller_fqdd):
@@ -805,3 +845,100 @@
             return True
 
         return False
+
+    def reset_raid_config(self, raid_controller):
+        """Delete all virtual disk and unassign all hotspares
+
+        The job to reset the RAID controller config will be in pending state.
+        For the changes to be applied, a config job must be created.
+
+        :param raid_controller: id of the RAID controller
+        :returns: a dictionary containing:
+                 - The is_commit_required key with the value always set to
+                   True indicating that a config job must be created to
+                   reset configuration.
+                 - The is_reboot_required key with a RebootRequired enumerated
+                   value indicating whether the server must be rebooted to
+                   reset configuration.
+        :raises: WSManRequestFailure on request failures
+        :raises: WSManInvalidResponse when receiving invalid response
+        :raises: DRACOperationFailed on error reported back by the DRAC
+                 interface
+        :raises: DRACUnexpectedReturnValue on return value mismatch
+        """
+
+        selectors = {'SystemCreationClassName': 'DCIM_ComputerSystem',
+                     'CreationClassName': 'DCIM_RAIDService',
+                     'SystemName': 'DCIM:ComputerSystem',
+                     'Name': 'DCIM:RAIDService'}
+        properties = {'Target': raid_controller}
+
+        doc = self.client.invoke(uris.DCIM_RAIDService, 'ResetConfig',
+                                 selectors, properties,
+                                 expected_return_value=utils.RET_SUCCESS)
+
+        return utils.build_return_dict(doc, uris.DCIM_RAIDService,
+                                       is_commit_required_value=True)
+
+    def clear_foreign_config(self, raid_controller):
+        """Free up foreign drives
+
+        The job to clear foreign config will be in pending state.
+        For the changes to be applied, a config job must be created.
+
+        :param raid_controller: id of the RAID controller
+        :returns: a dictionary containing:
+                 - The is_commit_required key with the value always set to
+                   True indicating that a config job must be created to
+                   clear foreign configuration.
+                 - The is_reboot_required key with a RebootRequired enumerated
+                   value indicating whether the server must be rebooted to
+                   clear foreign configuration.
+        :raises: WSManRequestFailure on request failures
+        :raises: WSManInvalidResponse when receiving invalid response
+        :raises: DRACOperationFailed on error reported back by the DRAC
+                 interface
+        :raises: DRACUnexpectedReturnValue on return value mismatch
+        """
+
+        selectors = {'SystemCreationClassName': 'DCIM_ComputerSystem',
+                     'CreationClassName': 'DCIM_RAIDService',
+                     'SystemName': 'DCIM:ComputerSystem',
+                     'Name': 'DCIM:RAIDService'}
+        properties = {'Target': raid_controller}
+
+        doc = self.client.invoke(uris.DCIM_RAIDService, 'ClearForeignConfig',
+                                 selectors, properties,
+                                 check_return_value=False)
+
+        is_commit_required_value = True
+        is_reboot_required_value = None
+
+        ret_value = utils.find_xml(doc,
+                                   'ReturnValue',
+                                   uris.DCIM_RAIDService).text
+
+        if ret_value == utils.RET_ERROR:
+            message_id = utils.find_xml(doc,
+                                        'MessageID',
+                                        uris.DCIM_RAIDService).text
+
+            # A MessageID 'STOR018'/'STOR058' indicates no foreign drive was
+            # detected. Return a value which informs the caller nothing
+            # further needs to be done.
+            no_foreign_drives_detected = any(
+                stor_id == message_id for stor_id in NO_FOREIGN_DRIVES)
+            if no_foreign_drives_detected:
+                is_commit_required_value = False
+                is_reboot_required_value = constants.RebootRequired.false
+            else:
+                message = utils.find_xml(doc,
+                                         'Message',
+                                         uris.DCIM_RAIDService).text
+                raise exceptions.DRACOperationFailed(
+                        drac_messages=message)
+
+        return utils.build_return_dict(
+                doc, uris.DCIM_RAIDService,
+                is_commit_required_value=is_commit_required_value,
+                is_reboot_required_value=is_reboot_required_value)
