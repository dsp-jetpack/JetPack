--- raid.py.orig	2019-06-04 04:56:04.000000000 +0000
+++ raid.py	2020-05-12 10:39:05.362757612 +0000
@@ -12,6 +12,7 @@
 #    under the License.
 
 import collections
+import copy
 import logging
 
 from dracclient import constants
@@ -81,7 +82,221 @@
     ['id', 'description', 'controller', 'manufacturer', 'model', 'media_type',
      'interface_type', 'size_mb', 'free_size_mb', 'serial_number',
      'firmware_version', 'status', 'raid_status', 'sas_address',
-     'device_protocol'])
+     'device_protocol', 'bus'])
+
+
+NO_FOREIGN_DRIVES = ["STOR058", "STOR018"]
+
+
+
+class RAIDAttribute(object):
+    """Generic RAID attribute class"""
+
+    def __init__(self, name, instance_id, current_value, pending_value,
+                 read_only, fqdd):
+        """Creates RAIDAttribute object
+
+        :param name: name of the RAID attribute
+        :param instance_id: InstanceID of the RAID attribute
+        :param current_value: list containing the current values of the
+                RAID attribute
+        :param pending_value: pending value of the RAID attribute, reflecting
+                an unprocessed change (eg. config job not completed)
+        :param read_only: indicates whether this RAID attribute can be changed
+        :param fqdd: Fully Qualified Device Description of the RAID Attribute
+        """
+
+        self.name = name
+        self.instance_id = instance_id
+        self.current_value = current_value
+        self.pending_value = pending_value
+        self.read_only = read_only
+        self.fqdd = fqdd
+
+    def __eq__(self, other):
+        return self.__dict__ == other.__dict__
+
+    @classmethod
+    def parse(cls, namespace, raid_attr_xml):
+        """Parses XML and creates RAIDAttribute object"""
+
+        name = utils.get_wsman_resource_attr(
+            raid_attr_xml, namespace, 'AttributeName')
+        instance_id = utils.get_wsman_resource_attr(
+            raid_attr_xml, namespace, 'InstanceID')
+        current_value = [attr.text for attr in
+                         utils.find_xml(raid_attr_xml, 'CurrentValue',
+                                        namespace, find_all=True)]
+        pending_value = utils.get_wsman_resource_attr(
+            raid_attr_xml, namespace, 'PendingValue', nullable=True)
+        read_only = utils.get_wsman_resource_attr(
+            raid_attr_xml, namespace, 'IsReadOnly')
+        fqdd = utils.get_wsman_resource_attr(
+            raid_attr_xml, namespace, 'FQDD')
+
+        return cls(name, instance_id, current_value, pending_value,
+                   (read_only == 'true'), fqdd)
+
+
+class RAIDEnumerableAttribute(RAIDAttribute):
+    """Enumerable RAID attribute class"""
+
+    namespace = uris.DCIM_RAIDEnumeration
+
+    def __init__(self, name, instance_id, current_value, pending_value,
+                 read_only, fqdd, possible_values):
+        """Creates RAIDEnumerableAttribute object
+
+        :param name: name of the RAID attribute
+        :param instance_id: InstanceID of the RAID attribute
+        :param current_value: list containing the current values of the
+                RAID attribute
+        :param pending_value: pending value of the RAID attribute, reflecting
+                an unprocessed change (eg. config job not completed)
+        :param read_only: indicates whether this RAID attribute can be changed
+        :param fqdd: Fully Qualified Device Description of the RAID
+                Attribute
+        :param possible_values: list containing the allowed values for the RAID
+                attribute
+        """
+        super(RAIDEnumerableAttribute, self).__init__(name, instance_id,
+                                                      current_value,
+                                                      pending_value,
+                                                      read_only, fqdd)
+
+        self.possible_values = possible_values
+
+    @classmethod
+    def parse(cls, raid_attr_xml):
+        """Parses XML and creates RAIDEnumerableAttribute object"""
+
+        raid_attr = RAIDAttribute.parse(cls.namespace, raid_attr_xml)
+        possible_values = [attr.text for attr
+                           in utils.find_xml(raid_attr_xml,
+                                             'PossibleValues',
+                                             cls.namespace, find_all=True)]
+
+        return cls(raid_attr.name, raid_attr.instance_id,
+                   raid_attr.current_value, raid_attr.pending_value,
+                   raid_attr.read_only, raid_attr.fqdd, possible_values)
+
+    def validate(self, new_value):
+        """Validates new value"""
+
+        if str(new_value) not in self.possible_values:
+            msg = ("Attribute '%(attr)s' cannot be set to value '%(val)s'."
+                   " It must be in %(possible_values)r.") % {
+                   'attr': self.name,
+                   'val': new_value,
+                   'possible_values': self.possible_values}
+            return msg
+
+
+class RAIDStringAttribute(RAIDAttribute):
+    """String RAID attribute class"""
+
+    namespace = uris.DCIM_RAIDString
+
+    def __init__(self, name, instance_id, current_value, pending_value,
+                 read_only, fqdd, min_length, max_length):
+        """Creates RAIDStringAttribute object
+
+        :param name: name of the RAID attribute
+        :param instance_id: InstanceID of the RAID attribute
+        :param current_value:  list containing the current values of the
+                RAID attribute
+        :param pending_value: pending value of the RAID attribute, reflecting
+                an unprocessed change (eg. config job not completed)
+        :param read_only: indicates whether this RAID attribute can be changed
+        :param fqdd: Fully Qualified Device Description of the RAID
+                Attribute
+        :param min_length: minimum length of the string
+        :param max_length: maximum length of the string
+        """
+        super(RAIDStringAttribute, self).__init__(name, instance_id,
+                                                  current_value, pending_value,
+                                                  read_only, fqdd)
+        self.min_length = min_length
+        self.max_length = max_length
+
+    @classmethod
+    def parse(cls, raid_attr_xml):
+        """Parses XML and creates RAIDStringAttribute object"""
+
+        raid_attr = RAIDAttribute.parse(cls.namespace, raid_attr_xml)
+        min_length = int(utils.get_wsman_resource_attr(
+            raid_attr_xml, cls.namespace, 'MinLength'))
+        max_length = int(utils.get_wsman_resource_attr(
+            raid_attr_xml, cls.namespace, 'MaxLength'))
+
+        return cls(raid_attr.name, raid_attr.instance_id,
+                   raid_attr.current_value, raid_attr.pending_value,
+                   raid_attr.read_only, raid_attr.fqdd,
+                   min_length, max_length)
+
+
+class RAIDIntegerAttribute(RAIDAttribute):
+    """Integer RAID attribute class"""
+
+    namespace = uris.DCIM_RAIDInteger
+
+    def __init__(self, name, instance_id, current_value, pending_value,
+                 read_only, fqdd, lower_bound, upper_bound):
+        """Creates RAIDIntegerAttribute object
+
+        :param name: name of the RAID attribute
+        :param instance_id: InstanceID of the RAID attribute
+        :param current_value: list containing the current value of the
+                RAID attribute
+        :param pending_value: pending value of the RAID attribute,
+                reflecting an unprocessed change
+                (eg. config job not completed)
+        :param read_only: indicates whether this RAID attribute can be
+                changed
+        :param fqdd: Fully Qualified Device Description of the RAID
+                Attribute
+        :param lower_bound: minimum value for the RAID attribute
+        :param upper_bound: maximum value for the RAID attribute
+        """
+        super(RAIDIntegerAttribute, self).__init__(name, instance_id,
+                                                   current_value,
+                                                   pending_value,
+                                                   read_only, fqdd)
+        self.lower_bound = lower_bound
+        self.upper_bound = upper_bound
+
+    @classmethod
+    def parse(cls, raid_attr_xml):
+        """Parses XML and creates RAIDIntegerAttribute object"""
+
+        raid_attr = RAIDAttribute.parse(cls.namespace, raid_attr_xml)
+        lower_bound = utils.get_wsman_resource_attr(
+            raid_attr_xml, cls.namespace, 'LowerBound')
+        upper_bound = utils.get_wsman_resource_attr(
+            raid_attr_xml, cls.namespace, 'UpperBound')
+
+        if raid_attr.current_value:
+            raid_attr.current_value = int(raid_attr.current_value[0])
+        if raid_attr.pending_value:
+            raid_attr.pending_value = int(raid_attr.pending_value)
+
+        return cls(raid_attr.name, raid_attr.instance_id,
+                   raid_attr.current_value, raid_attr.pending_value,
+                   raid_attr.read_only, raid_attr.fqdd,
+                   int(lower_bound), int(upper_bound))
+
+    def validate(self, new_value):
+        """Validates new value"""
+
+        val = int(new_value)
+        if val < self.lower_bound or val > self.upper_bound:
+            msg = ('Attribute %(attr)s cannot be set to value %(val)d.'
+                   ' It must be between %(lower)d and %(upper)d.') % {
+                       'attr': self.name,
+                       'val': new_value,
+                       'lower': self.lower_bound,
+                       'upper': self.upper_bound}
+            return msg
 
 
 class PhysicalDisk(PhysicalDiskTuple):
@@ -157,6 +372,10 @@
 
 class RAIDManagement(object):
 
+    NAMESPACES = [(uris.DCIM_RAIDEnumeration, RAIDEnumerableAttribute),
+                  (uris.DCIM_RAIDString, RAIDStringAttribute),
+                  (uris.DCIM_RAIDInteger, RAIDIntegerAttribute)]
+
     def __init__(self, client):
         """Creates RAIDManagement object
 
@@ -164,6 +383,54 @@
         """
         self.client = client
 
+    def list_raid_settings(self):
+        """List the RAID configuration settings
+
+        :returns: a dictionary with the RAID settings using InstanceID as the
+                  key. The attributes are either RAIDEnumerableAttribute,
+                  RAIDStringAttribute objects.
+        :raises: WSManRequestFailure on request failures
+        :raises: WSManInvalidResponse when receiving invalid response
+        :raises: DRACOperationFailed on error reported back by the DRAC
+                interface
+        """
+
+        return utils.list_settings(self.client, self.NAMESPACES,
+                                   by_name=False)
+
+    def set_raid_settings(self, raid_fqdd, new_settings):
+        """Sets the RAID configuration
+
+        It sets the pending_value parameter for each of the attributes
+        passed in. For the values to be applied, a config job must
+        be created.
+        :param raid_fqdd: the FQDD of the RAID setting.
+        :param new_settings: a dictionary containing the proposed values, with
+                         each key being the name of attribute and the value
+                         being the proposed value.
+        :returns: a dictionary containing:
+                 - The is_commit_required key with a boolean value indicating
+                   whether a config job must be created for the values to be
+                   applied.
+                 - The is_reboot_required key with a RebootRequired enumerated
+                   value indicating whether the server must be rebooted for the
+                   values to be applied. Possible values are true and false.
+        :raises: WSManRequestFailure on request failures
+        :raises: WSManInvalidResponse when receiving invalid response
+        :raises: DRACOperationFailed on error reported back by the DRAC
+                interface
+        """
+
+        return utils.set_settings('RAID',
+                                  self.client,
+                                  self.NAMESPACES,
+                                  new_settings,
+                                  uris.DCIM_RAIDService,
+                                  "DCIM_RAIDService",
+                                  "DCIM:RAIDService",
+                                  raid_fqdd,
+                                  by_name=False)
+
     def list_raid_controllers(self):
         """Returns the list of RAID controllers
 
@@ -197,7 +464,7 @@
                                                'PrimaryStatus')],
             firmware_version=self._get_raid_controller_attr(
                 drac_controller, 'ControllerFirmwareVersion'),
-            bus=self._get_raid_controller_attr(drac_controller, 'Bus'),
+            bus=self._get_raid_controller_attr(drac_controller, 'Bus').upper(),
             supports_realtime=RAID_CONTROLLER_IS_REALTIME[
                 self._get_raid_controller_attr(
                     drac_controller, 'RealtimeCapability')])
@@ -231,7 +498,12 @@
         drac_raid_level = self._get_virtual_disk_attr(drac_disk, 'RAIDTypes')
         size_b = self._get_virtual_disk_attr(drac_disk, 'SizeInBytes')
         drac_status = self._get_virtual_disk_attr(drac_disk, 'PrimaryStatus')
-        drac_raid_status = self._get_virtual_disk_attr(drac_disk, 'RAIDStatus')
+        drac_raid_status = self._get_virtual_disk_attr(
+            drac_disk, 'RAIDStatus', allow_missing=True)
+        if drac_raid_status is None:
+            drac_raid_status = self._get_virtual_disk_attr(
+                drac_disk, 'RaidStatus')
+
         drac_pending_operations = self._get_virtual_disk_attr(
             drac_disk, 'PendingOperations')
 
@@ -256,10 +528,12 @@
             physical_disks=self._get_virtual_disk_attrs(drac_disk,
                                                         'PhysicalDiskIDs'))
 
-    def _get_virtual_disk_attr(self, drac_disk, attr_name, nullable=False):
+    def _get_virtual_disk_attr(self, drac_disk, attr_name,
+                               nullable=False, allow_missing=False):
         return utils.get_wsman_resource_attr(
             drac_disk, uris.DCIM_VirtualDiskView, attr_name,
-            nullable=nullable)
+            nullable=nullable,
+            allow_missing=allow_missing)
 
     def _get_virtual_disk_attrs(self, drac_disk, attr_name):
         return utils.get_all_wsman_resource_attrs(
@@ -316,6 +590,11 @@
                                                        uri)
         drac_bus_protocol = self._get_physical_disk_attr(drac_disk,
                                                          'BusProtocol', uri)
+        bus = self._get_physical_disk_attr(drac_disk,
+                                           'Bus', uri,  allow_missing=True)
+
+        if bus is not None:
+            bus = bus.upper()
 
         return PhysicalDisk(
             id=fqdd,
@@ -341,7 +620,8 @@
             device_protocol=self._get_physical_disk_attr(drac_disk,
                                                          'DeviceProtocol',
                                                          uri,
-                                                         allow_missing=True))
+                                                         allow_missing=True),
+            bus=bus)
 
     def _get_physical_disk_attr(self, drac_disk, attr_name, uri,
                                 allow_missing=False):
@@ -633,15 +913,17 @@
         :param mode: constants.RaidStatus enumeration used to
                      determine what raid status to check for.
         :param physical_disks: all physical disks
-        :param controllers_to_physical_disk_ids: Dictionary of controllers
-                     we are inspecting and creating jobs for when needed. If
-                     needed modify this dict so that only drives that need to
-                     be changed to RAID or JBOD are in the list of disk keys
-                     for corresponding controller.
+        :param controllers_to_physical_disk_ids: Dictionary of controllers and
+               corresponding disk ids to convert to the requested mode.
+        :returns: a dictionary mapping controller FQDDs to the list of
+                  physical disks that need to be converted for that controller.
         :raises: ValueError: Exception message will list failed drives and
                      drives whose state cannot be changed at this time, drive
                      state is not "ready" or "non-RAID".
         """
+        controllers_to_physical_disk_ids = copy.deepcopy(
+            controllers_to_physical_disk_ids)
+
         p_disk_id_to_status = {}
         for physical_disk in physical_disks:
             p_disk_id_to_status[physical_disk.id] = physical_disk.raid_status
@@ -700,34 +982,37 @@
 
             raise ValueError(error_msg)
 
+        return controllers_to_physical_disk_ids
+
     def change_physical_disk_state(self, mode,
                                    controllers_to_physical_disk_ids=None):
-        """Convert disks RAID status and return a list of controller IDs
-
-        Builds a list of controller ids that have had disks converted to the
-        specified RAID status by:
-        - Examining all the disks in the system and filtering out any that are
-          not attached to a RAID/BOSS controller.
-        - Inspect the controllers' disks to see if there are any that need to
-          be converted, if so convert them. If a disk is already in the desired
-          status the disk is ignored. Also check for failed or unknown disk
-          statuses and raise an exception where appropriate.
-        - Return a list of controller IDs for controllers whom have had any of
-          their disks converted, and whether a reboot is required.
+        """Convert disks RAID status
 
-        The caller typically should then create a config job for the list of
-        controllers returned to finalize the RAID configuration.
+        This method intelligently converts the requested physical disks from
+        RAID to JBOD or vice versa.  It does this by only converting the
+        disks that are not already in the correct state.
 
-        :param mode: constants.RaidStatus enumeration used to determine what
-                     raid status to check for.
+        :param mode: constants.RaidStatus enumeration that indicates the mode
+                     to change the disks to.
         :param controllers_to_physical_disk_ids: Dictionary of controllers and
-               corresponding disk ids we are inspecting and creating jobs for
-               when needed.
-        :returns: a dict containing the following key/values:
+               corresponding disk ids to convert to the requested mode.
+        :returns: a dictionary containing:
+                  - conversion_results, a dictionary that maps controller ids
+                    to the conversion results for that controller.  The
+                    conversion results are a dict that contains:
+                    - The is_commit_required key with the value always set to
+                      True indicating that a config job must be created to
+                      complete disk conversion.
+                    - The is_reboot_required key with a RebootRequired
+                      enumerated value indicating whether the server must be
+                      rebooted to complete disk conversion.
+                  Also contained in the main dict are the following key/values,
+                  which are deprecated, should not be used, and will be removed
+                  in a future release:
                   - is_reboot_required, a boolean stating whether a reboot is
-                  required or not.
+                    required or not.
                   - commit_required_ids, a list of controller ids that will
-                  need to commit their pending RAID changes via a config job.
+                    need to commit their pending RAID changes via a config job.
         :raises: DRACOperationFailed on error reported back by the DRAC and the
                  exception message does not contain NOT_SUPPORTED_MSG constant.
         :raises: Exception on unknown error.
@@ -754,13 +1039,14 @@
         Raise exception if there are any failed drives or
         drives not in status 'ready' or 'non-RAID'
         '''
-        self._check_disks_status(mode, physical_disks,
-                                 controllers_to_physical_disk_ids)
+        final_ctls_to_phys_disk_ids = self._check_disks_status(
+                mode, physical_disks, controllers_to_physical_disk_ids)
 
         is_reboot_required = False
         controllers = []
+        controllers_to_results = {}
         for controller, physical_disk_ids \
-                in controllers_to_physical_disk_ids.items():
+                in final_ctls_to_phys_disk_ids.items():
             if physical_disk_ids:
                 LOG.debug("Converting the following disks to {} on RAID "
                           "controller {}: {}".format(
@@ -773,22 +1059,39 @@
                     if constants.NOT_SUPPORTED_MSG in str(ex):
                         LOG.debug("Controller {} does not support "
                                   "JBOD mode".format(controller))
-                        pass
+                        controllers_to_results[controller] = \
+                            utils.build_return_dict(
+                                doc=None,
+                                resource_uri=None,
+                                is_commit_required_value=False,
+                                is_reboot_required_value=constants.
+                                RebootRequired.false)
                     else:
                         raise
                 else:
-                    if conversion_results:
-                        reboot_true = constants.RebootRequired.true
-                        reboot_optional = constants.RebootRequired.optional
-                        _is_reboot_required = \
-                            conversion_results["is_reboot_required"]
-                        is_reboot_required = is_reboot_required \
-                            or (_is_reboot_required
-                                in [reboot_true, reboot_optional])
-                        if conversion_results["is_commit_required"]:
-                            controllers.append(controller)
+                    controllers_to_results[controller] = conversion_results
+
+                    # Remove the code below when is_reboot_required and
+                    # commit_required_ids are deprecated
+                    reboot_true = constants.RebootRequired.true
+                    reboot_optional = constants.RebootRequired.optional
+                    _is_reboot_required = \
+                        conversion_results["is_reboot_required"]
+                    is_reboot_required = is_reboot_required \
+                        or (_is_reboot_required
+                            in [reboot_true, reboot_optional])
+                    controllers.append(controller)
+            else:
+                controllers_to_results[controller] = \
+                    utils.build_return_dict(
+                        doc=None,
+                        resource_uri=None,
+                        is_commit_required_value=False,
+                        is_reboot_required_value=constants.
+                        RebootRequired.false)
 
-        return {'is_reboot_required': is_reboot_required,
+        return {'conversion_results': controllers_to_results,
+                'is_reboot_required': is_reboot_required,
                 'commit_required_ids': controllers}
 
     def is_realtime_supported(self, raid_controller_fqdd):
@@ -805,3 +1108,100 @@
             return True
 
         return False
+
+    def reset_raid_config(self, raid_controller):
+        """Delete all virtual disk and unassign all hotspares
+
+        The job to reset the RAID controller config will be in pending state.
+        For the changes to be applied, a config job must be created.
+
+        :param raid_controller: id of the RAID controller
+        :returns: a dictionary containing:
+                 - The is_commit_required key with the value always set to
+                   True indicating that a config job must be created to
+                   reset configuration.
+                 - The is_reboot_required key with a RebootRequired enumerated
+                   value indicating whether the server must be rebooted to
+                   reset configuration.
+        :raises: WSManRequestFailure on request failures
+        :raises: WSManInvalidResponse when receiving invalid response
+        :raises: DRACOperationFailed on error reported back by the DRAC
+                 interface
+        :raises: DRACUnexpectedReturnValue on return value mismatch
+        """
+
+        selectors = {'SystemCreationClassName': 'DCIM_ComputerSystem',
+                     'CreationClassName': 'DCIM_RAIDService',
+                     'SystemName': 'DCIM:ComputerSystem',
+                     'Name': 'DCIM:RAIDService'}
+        properties = {'Target': raid_controller}
+
+        doc = self.client.invoke(uris.DCIM_RAIDService, 'ResetConfig',
+                                 selectors, properties,
+                                 expected_return_value=utils.RET_SUCCESS)
+
+        return utils.build_return_dict(doc, uris.DCIM_RAIDService,
+                                       is_commit_required_value=True)
+
+    def clear_foreign_config(self, raid_controller):
+        """Free up foreign drives
+
+        The job to clear foreign config will be in pending state.
+        For the changes to be applied, a config job must be created.
+
+        :param raid_controller: id of the RAID controller
+        :returns: a dictionary containing:
+                 - The is_commit_required key with the value always set to
+                   True indicating that a config job must be created to
+                   clear foreign configuration.
+                 - The is_reboot_required key with a RebootRequired enumerated
+                   value indicating whether the server must be rebooted to
+                   clear foreign configuration.
+        :raises: WSManRequestFailure on request failures
+        :raises: WSManInvalidResponse when receiving invalid response
+        :raises: DRACOperationFailed on error reported back by the DRAC
+                 interface
+        :raises: DRACUnexpectedReturnValue on return value mismatch
+        """
+
+        selectors = {'SystemCreationClassName': 'DCIM_ComputerSystem',
+                     'CreationClassName': 'DCIM_RAIDService',
+                     'SystemName': 'DCIM:ComputerSystem',
+                     'Name': 'DCIM:RAIDService'}
+        properties = {'Target': raid_controller}
+
+        doc = self.client.invoke(uris.DCIM_RAIDService, 'ClearForeignConfig',
+                                 selectors, properties,
+                                 check_return_value=False)
+
+        is_commit_required_value = True
+        is_reboot_required_value = None
+
+        ret_value = utils.find_xml(doc,
+                                   'ReturnValue',
+                                   uris.DCIM_RAIDService).text
+
+        if ret_value == utils.RET_ERROR:
+            message_id = utils.find_xml(doc,
+                                        'MessageID',
+                                        uris.DCIM_RAIDService).text
+
+            # A MessageID 'STOR018'/'STOR058' indicates no foreign drive was
+            # detected. Return a value which informs the caller nothing
+            # further needs to be done.
+            no_foreign_drives_detected = any(
+                stor_id == message_id for stor_id in NO_FOREIGN_DRIVES)
+            if no_foreign_drives_detected:
+                is_commit_required_value = False
+                is_reboot_required_value = constants.RebootRequired.false
+            else:
+                message = utils.find_xml(doc,
+                                         'Message',
+                                         uris.DCIM_RAIDService).text
+                raise exceptions.DRACOperationFailed(
+                        drac_messages=message)
+
+        return utils.build_return_dict(
+                doc, uris.DCIM_RAIDService,
+                is_commit_required_value=is_commit_required_value,
+                is_reboot_required_value=is_reboot_required_value)
