--- /usr/lib/python2.7/site-packages/dracclient/resources/raid.py	2019-04-23 19:30:47.284579280 +0000
+++ raid.py	2019-04-23 19:30:37.187395939 +0000
@@ -34,6 +34,11 @@
 
 REVERSE_RAID_LEVELS = dict((v, k) for (k, v) in RAID_LEVELS.items())
 
+RAID_CONTROLLER_IS_REALTIME = {
+    '1': True,
+    '0': False
+}
+
 DISK_RAID_STATUS = {
     '0': 'unknown',
     '1': 'ready',
@@ -110,7 +115,8 @@
 
 RAIDController = collections.namedtuple(
     'RAIDController', ['id', 'description', 'manufacturer', 'model',
-                       'primary_status', 'firmware_version', 'bus'])
+                       'primary_status', 'firmware_version', 'bus',
+                       'supports_realtime'])
 
 VirtualDiskTuple = collections.namedtuple(
     'VirtualDisk',
@@ -191,7 +197,10 @@
                                                'PrimaryStatus')],
             firmware_version=self._get_raid_controller_attr(
                 drac_controller, 'ControllerFirmwareVersion'),
-            bus=self._get_raid_controller_attr(drac_controller, 'Bus'))
+            bus=self._get_raid_controller_attr(drac_controller, 'Bus'),
+            supports_realtime=RAID_CONTROLLER_IS_REALTIME[
+                self._get_raid_controller_attr(
+                    drac_controller, 'RealtimeCapability')])
 
     def _get_raid_controller_attr(self, drac_controller, attr_name):
         return utils.get_wsman_resource_attr(
@@ -572,24 +581,41 @@
 
         return is_jbod_capable
 
-    def is_raid_controller(self, raid_controller_fqdd):
+    def is_raid_controller(self, raid_controller_fqdd, raid_controllers=None):
         """Find out if object's fqdd is for a raid controller or not
 
         :param raid_controller_fqdd: The object's fqdd we are testing to see
                                      if it is a raid controller or not.
+        :param raid_controllers: A list of RAIDControllers used to check for
+                                 the presence of BOSS cards.  If None, the
+                                 iDRAC will be queried for the list of
+                                 controllers.
         :returns: boolean, True if the device is a RAID controller,
                   False if not.
         """
-        return raid_controller_fqdd.startswith('RAID.')
+        return raid_controller_fqdd.startswith('RAID.') or \
+            self.is_boss_controller(raid_controller_fqdd, raid_controllers)
 
-    def is_boss_controller(self, raid_controller_fqdd):
+    def is_boss_controller(self, raid_controller_fqdd, raid_controllers=None):
         """Find out if a RAID controller a BOSS card or not
 
         :param raid_controller_fqdd: The object's fqdd we are testing to see
                                      if it is a BOSS card or not.
+        :param raid_controllers: A list of RAIDController to scan for presence
+                                 of BOSS card, if None the drac will be queried
+                                 for the list of controllers which will then be
+                                 scanned.
         :returns: boolean, True if the device is a BOSS card, False if not.
+        :raises: WSManRequestFailure on request failures
+        :raises: WSManInvalidResponse when receiving invalid response
+        :raises: DRACOperationFailed on error reported back by the DRAC
+                 interface
         """
-        return raid_controller_fqdd.startswith('AHCI.')
+        if raid_controllers is None:
+            raid_controllers = self.list_raid_controllers()
+        boss_raid_controllers = [
+            c.id for c in raid_controllers if c.model.startswith('BOSS')]
+        return raid_controller_fqdd in boss_raid_controllers
 
     def _check_disks_status(self, mode, physical_disks,
                             controllers_to_physical_disk_ids):
@@ -713,10 +739,11 @@
         if not controllers_to_physical_disk_ids:
             controllers_to_physical_disk_ids = collections.defaultdict(list)
 
+            all_controllers = self.list_raid_controllers()
             for physical_d in physical_disks:
                 # Weed out disks that are not attached to a RAID controller
-                if (self.is_raid_controller(physical_d.controller)
-                        or self.is_boss_controller(physical_d.controller)):
+                if self.is_raid_controller(physical_d.controller,
+                                           all_controllers):
                     physical_disk_ids = controllers_to_physical_disk_ids[
                         physical_d.controller]
 
@@ -763,3 +790,18 @@
 
         return {'is_reboot_required': is_reboot_required,
                 'commit_required_ids': controllers}
+
+    def is_realtime_supported(self, raid_controller_fqdd):
+        """Find if controller supports realtime or not
+
+        :param raid_controller_fqdd: ID of RAID controller
+        :returns: True or False
+        """
+        drac_raid_controllers = self.list_raid_controllers()
+        realtime_controller = [cnt.id for cnt in drac_raid_controllers
+                               if cnt.supports_realtime]
+
+        if raid_controller_fqdd in realtime_controller:
+            return True
+
+        return False
